#!/usr/bin/python
# -*- coding: utf-8 -*-
#
#     rce-core/rce-container
#
#     This file is part of the RoboEarth Cloud Engine framework.
#
#     This file was originally created for RoboEearth
#     http://www.roboearth.org/
#
#     The research leading to these results has received funding from
#     the European Union Seventh Framework Programme FP7/2007-2013 under
#     grant agreement no248942 RoboEarth.
#
#     Copyright 2013 RoboEarth
#
#     Licensed under the Apache License, Version 2.0 (the "License");
#     you may not use this file except in compliance with the License.
#     You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.
#
#     \author/s: Dominique Hunziker
#
#

if __name__ == '__main__':
    # Before we start, check if the script can be executed, i.e. if we have
    # the necessary super user privileges
    import os
    import sys

    if os.getuid() != 0:
        print('{0} has to be run as super '
              'user.'.format(os.path.basename(sys.argv[0])))
        exit(1)

# Python specific imports
from hashlib import sha256

# twisted specific imports
from twisted.internet import reactor
from twisted.cred.credentials import UsernamePassword

# rce specific imports
from rce.container import main
from rce.util.settings import getSettings
settings = getSettings()


def _get_argparse():
    from argparse import ArgumentParser

    parser = ArgumentParser(prog='rce-container',
                            description='RCE Container Client Process.')

    parser.add_argument('masterIP', type=str,
                        help='IP address of Master Process.')

    if not settings.dev_mode:
        parser.add_argument('masterPassword', type=str, help='Admin Password')
        parser.add_argument('infraPassword', type=str,
                            help='Admin-Infrastructure Password')

    parser.add_argument('--size', type=int,
                        help='Total Size of Machine ', default=settings.size)
    parser.add_argument('--cpu', type=int,
                        help='Total CPU of Machine ', default=settings.cpu)
    parser.add_argument('--memory', type=int,
                        help='Total Memory of Machine ', default=settings.memory)
    parser.add_argument('--bandwidth', type=int,
                        help='Total Bandwidth of Machine ', default=settings.bandwidth)
    parser.add_argument('--special_features', type=str,
                        help="Special features of Machine input, e.g. 'avxi,gpu,ssev3'",
                        default=settings.special_features)

    return parser


if __name__ == '__main__':
    args = _get_argparse().parse_args()

    # Credentials which should be used to login to Master process
    if settings.dev_mode:
        cred = UsernamePassword('container', sha256('admin').hexdigest())
        passwd = sha256('admin').hexdigest()
    else:
        cred = UsernamePassword('container',
                                sha256(args.infraPassword).hexdigest())
        passwd = sha256(args.masterPassword).hexdigest()

    if isinstance(args.special_features, list):
        specialFeatures = args.special_features
    else:
        specialFeatures = args.special_features.strip("' ").split(',')

    data = {'size':args.size, 'cpu':args.cpu,
            'memory':args.memory, 'bandwidth':args.bandwidth,
            'specialFeatures':specialFeatures}

    main(reactor, cred, args.masterIP, settings.internal_port, passwd,
         cred.password, settings.container_interface, settings.internal_IP,
         settings.container_IP, settings.comm_port, settings.ros_proxy_port,
         settings.rootfs, settings.conf_dir, settings.data_dir,
         settings.packages, settings.host_ubuntu_release,
         settings.container_ros_release, data)
